---
import {getCollection} from 'astro:content';
import Layout from './main.astro';
import PostSharing from '../components/PostSharing.astro';
import DisqusThread from "../components/DisqusThread.astro";
import site from "../data/config";
import { DateTime } from "luxon";
import slugify from 'slugify';

const { post } = Astro.props
const date = DateTime.fromISO(post.date, { zone: "UTC" });

const categories = (post.categories || []).map(cat => {
    return {
        name: cat,
        slug: slugify(cat, {
            replacement: '-',
            lower: true,
            strict: true,
            trim: true
        })
    };
});


const posts = await getCollection('post', ({data}) => {
    return import.meta.env.PROD ? data.published !== false : true;
}).then(posts => posts
    .sort((a, b) => new Date(a.data.date) - new Date(b.data.date)));

const currentPostIndex = posts.findIndex((p) => p.id == post.id);
const previousPost = currentPostIndex + 1 === posts.length ? undefined : posts[currentPostIndex + 1];
let prevUrl = null;
if(previousPost){
    let pDate = DateTime.fromISO(previousPost.data.date, { zone: "UTC" });
    prevUrl = `/${pDate.toFormat('yyyy')}/${pDate.toFormat('LL')}/${previousPost.slug ?? slugify(previousPost.data.title, {
        replacement: '-',
        lower: true,
        strict: true,
        trim: true
    })}/`;
}
const nextPost = currentPostIndex === 0 ? undefined : posts[currentPostIndex - 1];
let nextUrl = null;
if(nextPost){
    let pDate = DateTime.fromISO(nextPost.data.date, { zone: "UTC" });
    nextUrl = `/${pDate.toFormat('yyyy')}/${pDate.toFormat('LL')}/${nextPost.slug ?? slugify(nextPost.data.title, {
        replacement: '-',
        lower: true,
        strict: true,
        trim: true
    })}/`;
}

const meta = [
    { "property": "og:type", content: 'article' },
    { "property": "og:title", content: post.title },
    { "property": "og:description", content: post.description || post.excerpt },
    { "property": "og:url", content: site.url + Astro.url.pathname },
    { "property": "article:published_time", content: date.toISO() },
    { "property": "article:modified_time", content: date.toISO() },
    { "property": "twitter:description", content: post.description || post.excerpt },
    { "property": "twitter:title", content: post.title },
    { "property": "twitter:site", content: site.twitter },
    { "property": "twitter:card", content: "summary_large_image" },
    { "property": "twitter:creator", content: site.twitter },
];
if (post.image) {
    try {
        meta.push({ "property": "twitter:image", content: post.image.src });
        meta.push({ "property": "og:image", content: post.image.src });
        meta.push({ "property": "og:image:width", content: post.image.width });
        meta.push({ "property": "og:image:height", content: post.image.height });
    } catch (error) {
        console.error(error)
    }
}
categories.forEach(category => {
    meta.push({ "property": "article:tag", content: category.name });
});

const schema = {
    "@context": "https://schema.org",
    "@type": "Blog",
    "blogPost": {
        "@type": "BlogPosting",
        "@id": site.url + Astro.url.pathname,
        "headline": post.title,
        "name": post.title,
        "description": post.description || post.excerpt,
        "datePublished": date.toISO(),
        "dateModified": date.toISO(),
        "author": {
            "@type": "Person",
            "name": post.author || site.author || "Jonathan Bernardi",
        },
        "publisher": {
            "@type": "Person",
            "name": "Jonathan Bernardi",
            "sameAs": ["https://twitter.com/thejonbernardi", "https://www.jonbernardi.com/", "https://www.linkedin.com/pub/jonathan-bernardi/57/318/99a", "https://github.com/spekkionu"]
        },
        "mainEntityOfPage": {
            "@type": "WebPage",
            "@id": site.url + Astro.url.pathname
        },
        "keywords": categories.map(c => c.name).join(', ')
    },
};

---
<Layout title={post.title} description={post.meta_description || post.excerpt} meta_tags={meta} author={post.author || site.author || 'Jonathan Bernardi'} noindex={post.noindex || false}>
    <script slot="schema" type="application/ld+json" set:html={JSON.stringify(schema)} />
    <Fragment slot="head">
        {post.prev || prevUrl ? <link rel="prev" href={post.prev ? site.url + post.prev : prevUrl} /> : null}
        {post.next || nextUrl ? <link rel="next" href={post.next ? site.url + post.next : nextUrl} /> : null}
    </Fragment>
    <article class="post h-entry hentry">
        <h1 class="post__title p-name entry-title">{post.title}</h1>
        <time class="post__date dt-published published" datetime={post.date}>{date.toFormat('DDD')}</time>
        <div class="post__author p-author author h-card vcard">
            <span class="p-name">{post.author || 'Jonathan Bernardi'}</span>
        </div>
        <div class="post__categories">
            <strong>Categories:</strong>
            {categories.map(cat => (
                <a class="posts__post__category" href={`/category/${cat.slug}/`}>{cat.name}</a>
            ))}
        </div>
        <div class="post__content e-content entry-content"><slot /></div>
        <PostSharing url={site.url + Astro.url.pathname} title={post.title} excerpt={post.description} />
    </article>

    <div class="pagination">
        {previousPost ? <a class="pagination__link pagination__link--previous" href={prevUrl}>&larr; Newer</a> : <span></span>}
        <a class="pagination__link pagination__link--archive" href="/archives/">Blog Archives</a>
        {nextPost ? <a class="pagination__link pagination__link--next" href={nextUrl}>Older &rarr;</a> : <span></span>}
    </div>


    {
        site.disqus_short_name && (
                    <section class="post__comments">
                        <h1>Comments</h1>
                        <DisqusThread url={site.url + Astro.url.pathname} />
                    </section>
        )
    }

</Layout>
